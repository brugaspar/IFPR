datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LogAction {
  insert
  update
  disable
  sign_in_error
}

model Permissions {
  id          String  @id @default(uuid())
  name        String
  slug        String
  description String?

  @@map("permissions")
}

model Users {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  username        String    @unique
  permissions     Json
  disabled        Boolean   @default(false)
  disabledAt      DateTime? @map("disabled_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  lastDisabledBy  String?   @map("last_disabled_by")
  usersDisabled   Users?    @relation("UserToDisabled", fields: [lastDisabledBy], references: [id])
  UsersDisabled   Users[]   @relation("UserToDisabled")
  lastUpdatedBy   String?   @map("last_updated_by")
  usersUpdated    Users?    @relation("UserToUpdated", fields: [lastUpdatedBy], references: [id])
  UsersUpdated    Users[]   @relation("UserToUpdated")
  createdBy       String?   @map("created_by")
  usersCreated    Users?    @relation("UserToCreated", fields: [createdBy], references: [id])
  UsersCreated    Users[]   @relation("UserToCreated")
  Log             Logs[]
  PlansDisabled   Plans[]   @relation("PlanToDisabled")
  PlansUpdated    Plans[]   @relation("PlanToUpdated")
  PlansCreated    Plans[]   @relation("PlanToCreated")
  MembersDisabled Members[] @relation("MemberToDisabled")
  MembersUpdated  Members[] @relation("MemberToUpdated")
  MembersCreated  Members[] @relation("MemberToCreated")


  @@map("users")
}

model Tables {
  id   String @id @default(uuid())
  name String @unique
  Log  Logs[]

  @@map("general_tables")
}

model Logs {
  id          String    @id @default(uuid())
  description String
  action      LogAction
  tableId     String    @map("table_id")
  table       Tables    @relation(fields: [tableId], references: [id])
  referenceId String    @map("reference_id")
  userId      String?   @map("user_id")
  user        Users?    @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("general_logs")
}

model States {
  id       Int      @id
  name     String
  initials String
  Cities   Cities[]

  @@map("states")
}

model Cities {
  id      Int       @id
  name    String
  stateId Int       @map("state_id")
  state   States    @relation(fields: [stateId], references: [id])
  Members Members[]

  @@map("cities")
}

model Plans {
  id                    String    @id @default(uuid())
  name                  String
  description           String?
  value                 Float
  renewValue            Float     @map("renew_value")
  gunTargetDiscount     Float     @map("gun_target_discount")
  courseDiscount        Float     @map("course_discount")
  shootingDrillsPerYear Int       @map("shooting_drills_per_year")
  gunExemption          Boolean   @map("gun_exemption")
  targetExemption       Boolean   @map("target_exemption")
  disabled              Boolean   @default(false)
  disabledAt            DateTime? @map("disabled_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")
  lastDisabledBy        String?   @map("last_disabled_by")
  usersDisabled         Users?    @relation("PlanToDisabled", fields: [lastDisabledBy], references: [id])
  lastUpdatedBy         String?   @map("last_updated_by")
  usersUpdated          Users?    @relation("PlanToUpdated", fields: [lastUpdatedBy], references: [id])
  createdBy             String?   @map("created_by")
  usersCreated          Users?    @relation("PlanToCreated", fields: [createdBy], references: [id])
  Members               Members[]

  @@map("members_plans")
}

enum Gender {
  male
  female
  other
}

enum MaritalStatus {
  single
  married
  widower
  legally_separated
  divorced
}

enum BloodTyping {
  APositive
  ANegative
  BPositive
  BNegative
  ABPositive
  ABNegative
  OPositive
  ONegative
}

model Members {
  id               String        @id @default(uuid())
  name             String
  rg               String
  issuingAuthority String        @map("issuing_authority")
  cpf              String        @unique
  naturalityCityId Int           @map("naturality_city_id")
  Cities           Cities        @relation(fields: [naturalityCityId], references: [id])
  motherName       String?       @map("mother_name")
  fatherName       String?       @map("father_name")
  profession       String
  email            String?       @unique
  phone            String?
  cellPhone        String        @map("cell_phone")
  crNumber         String        @map("cr_number")
  issuedAt         DateTime      @map("issued_at")
  birthDate        DateTime      @map("birth_date")
  crValidity       DateTime      @map("cr_validity")
  healthIssues     String?       @map("health_issues")
  gender           Gender
  maritalStatus    MaritalStatus @map("marital_status")
  bloodTyping      BloodTyping   @map("blood_typing")
  disabled         Boolean       @default(false)
  disabledAt       DateTime?     @map("disabled_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at")
  lastDisabledBy   String?       @map("last_disabled_by")
  usersDisabled    Users?        @relation("MemberToDisabled", fields: [lastDisabledBy], references: [id])
  lastUpdatedBy    String?       @map("last_updated_by")
  usersUpdated     Users?        @relation("MemberToUpdated", fields: [lastUpdatedBy], references: [id])
  createdBy        String?       @map("created_by")
  usersCreated     Users?        @relation("MemberToCreated", fields: [createdBy], references: [id])
  planId           String        @map("plan_id")
  Plans            Plans         @relation(fields: [planId], references: [id])

  @@map("members")
}
